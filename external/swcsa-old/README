
icsa-based temporal graph representacion

compile with : sh compileGICSA.sh


              
* create-gicsa      
	--> Build Program: It builds an index over a given dataset file. 
	
	Usage: ./create-gicsa <source file> <index file> [<BUILD_OPTIONS>]
	
		-BUILD_OPTIONS for giCSA: Given building parameters (sampling and compression of psi).
			All those options appear between ""... and will be separated by commas if more
				than one appear.
			*sPsi : default = 32 : Distance between samples of the psi array 
			*nsHuff: default=16 (x1024 = Number of Huffman symbols used for compression of psi)
			*psiSF : factor for the searches in the samples of psi (set to 1,2,4,8).

	Examples of use
	mkdir indexes
	#zcat ./texts/cnlong.txt.gz | ../create-gicsa stdin ./indexes/cnlong "sPsi=16; nsHuff=16;psiSF=4"
	#zcat ./texts/cnlong.txt.gz | ../create-gicsa stdin ./indexes/cnlong "sPsi=64; nsHuff=16;psiSF=4"
	../create-gicsa ./texts/cnlong.txt ./indexes/cnlong "sPsi=16; nsHuff=16;psiSF=4"

* stats-gicsa       
	--> shows info (sizes) of the gicsa index: vocabulary + self-indexed SE.

	Usage:  ./stats-gicsa <index>
	
	Example of use:
		../STATSwcsa ./indexes/cnlong
	
* benchmark-gicsa: 
	--> program to perform queries.
	
	Usage: ./benchmark-gicsa <graphfile> <queryfile> [<gotqueryfile>]
	
	Example of use:	
		../benchmark indexes/cnlong ./queries/cnlong/1000queries-dirnei-point.txt 0 490
		*****




















































































OLD ................................................



Simple WCSA version without presentation layer, "wcsa" in advance. (both words and separators are indexed).

============================================================================
1. The package.
------------

Assume you extract all in $CURRENT.

You will find the following elements in the package:
	-$CURRENT/Makefile
	-$CURRENT/src
	-$CURRENT/src/intIndex   (implementation of the icsa self-index)
	-$CURRENT/pizza
	-$CURRENT/pizza/Makefile
	-$CURRENT/README

Also:
	-$CURRENT/various/patts       (some sample patterns).
	-$CURRENT/various/pattsEN     (some sample patterns over corpus "english.100MB").

	-$CURRENT/go*         		  (some scripts for building the indexes and statistics).
	-$CURRENT/pizza/go*           (some scripts for performing different types of searches).

	-$CURRENT/scriptsWCSA/go*     (some scripts for launching tests over corpus "english.100MB").
	-$CURRENT/texts				  (a text collection used in the tests).

============================================================================
2. Functions supported:
--------------------
 
  * BUILDING THE INDEX.
	-	int build_index (uchar *text, ulong length, char *build_options, void **index);

  * SEARCHES USING THE INDEX.
  
	-	int count (void *index, uchar *pattern, ulong length, ulong *numocc);
        
	-	int locateWord(void *index, uchar *pattern, ulong length, ulong **occ, ulong *numocc, uint kbefore);

	-	int displayWords (void *index, uchar *pattern, ulong length, ulong numc, 
         ulong *numocc, uchar **snippet_text, ulong **snippet_lengths, uint kbefore);

	-	int displayTextOcurrencesNoShow(void *index, uchar *pattern, ulong length, uint wordsbefore, uint maxnumc);
	
	-	int extractWords (void *index, ulong fromWord, ulong toWord, uchar **text, ulong *text_length);

  ** Note: In swcsa references to the source text are not kept (as in the Flexible-WCSA), 
	therefore operations "locate/display/extract" referring to source text positions (chars) 
	are **not supported** from the interface ("$CURRENT/pizza/interface.h") given. That is: 

		-	int locate (void *index, uchar *pattern, ulong length, ulong **occ, ulong *numocc);

		-	int display (void *index, uchar *pattern, ulong length, ulong numc, 
								ulong *numocc, uchar **snippet_text, ulong **snippet_lengths);
								
		-	int extract (void *index, ulong from, ulong to, uchar **snippet, ulong *snippet_length);

============================================================================
3. Compiling steps.
----------------
    1. Go to $CURRENT folder
    2. Type "make".

		--> 5 executable files will be created in $CURRENT:
		  * BUILDPARSER   --> procceses a text and generates a "text of integer ids (SE)".
                              Builds also the presentacion layer. (Just an array of words sorted
                              alphabetically in swcsa)
		  * BUILDINTINDEX --> creates a self-index on the "text of integer ids" (the array in file index.se
							  is no longer required as the self-index represents it implicitely).
		  * STATS         --> shows info (sizes) of the WCSA index: presentation layer +
                              self-index on ints (for SE).
                              
          * BUILDUNCOMPRESS --> Test Program: Permits to check extraction of data from the index: 
                              It recovers the original source text from a given self-index.
          * BUILDALL      --> Test Program: It builds an index over a given text file. Then it 
		                      tests "extract" recovering the original data (it is output to a temp file). 
		                      Finally, it permits to test "display" and "locate" operations by interactively 
		                      by performing queries for any given pattern provided by the user. 

		--> 2 executable files will be created in "$CURRENT/pizza" folder:
          * BUILDwcsa:  --> permits to build the index (with the diff parameters) in just
          					one step. 
                            It needs more memory than using BUILDPARSER first and then BUILDINTINDEX.
          * SEARCHwcsa: --> program to perform all searches.


		**Note: our scripts will be referred to BUILDwcsa and SEARCHwcsa**
		**      STATS, give more detailed statistics of the swcsa index **

		**Note. BUILDwcsa creates a file "index.se" with the "text of integer ids(SE)". It 
				consists of a file where each id is represented as an uint32.
				
3.1. Further compilation issues:
	The file "$CURRENT/Makefile" leads the compilation process of both of the different parts
	of the sWCSA. 
	
	A) 32bit and 64bit executables:
		Uncomment (only) one of the following lines in the Makefile file.
		#export CFLAGS  = -O9 -m64 -D_FORTIFY_SOURCE=0 
		#export CFLAGS  = -O9 -m32 -D_FORTIFY_SOURCE=0 #default
		
	B) Suffix-Array suffix-sorting algorithm.
		You can choose between the simple "q-sort" and "Larson-Sadakane" algorithm.
		Uncomment one of the following lines:
		
		#SRCDIRCSA   = intIndex_larson  #default 
		#SRCDIRCSA   = intIndex_qsort		
					

============================================================================
4. Running steps.
-----------------
4.1. ** Building an index "simple WCSA" **.
There are two ways of building a self-index swcsa for a given text.

4.1.1. Building an index in two steps in folder $CURRENT (less memory requeriments).
	Follow the next two steps A) and B):

  A) Parsing the original text, building the presentation layer, and generating a 
	sequence of integer ids for the words (SE) that will be self-indexed next.

    * Syntax: 
    	./BUILDPARSER INFILE OUTBASEFILE ["BUILD_OPTIONS"]

    	+ where:
    		-INFILE is a text file.
    		-OUTBASENAME is the basename for all the files used by the index (3 for WCSA).
    		-BUILD_OPTIONS for parser: **No build options** are needed for the simple WCSA.

		+ example of use
			./BUILDPARSER ./texts/english.100M ./indexes/EN100MB

  B) Building a self-index on integers from a file containing a sequence of (uint32) values.
	The input file is a file containing the elements in (SE) from the previous step. In the
	example above, from file "EN100MB.se". Several (9 for WCSA) files will be generated 
	for the self-index. They are named based on the name of the input file (but diff extension).

   * Syntax: 
    	./BUILDINTINDEX BASENAME ["BUILD_OPTIONS"]

    	+ where:
    		-BASENAME: The input file will be "BASENAME.se" and all the files used by the index
				will be of the form "BASENAME.*" .

    		-BUILD_OPTIONS for iCSA: Given building parameters (sampling and compression of psi).
    			All those options appear between ""... and will be separated by commas if more
				than one appear.
    			*sA   : Distance between samples of the suffix array (A)
    			*sAinv: Distance of samples of the inverse of A
    			*sPsi : Distance between samples of the psi array
    			*nsHuff: default=16 (x1024 = Number of Huffman symbols used for compression of psi)
    			*psiSF : factor for the searches in the samples of psi (set to 1,2,4,8).

		+ example of use:
			./BUILDINTINDEX ./indexes/EN100MB "sA=32;sAinv=32;sPsi=32;nsHuff=16;psiSF=4"

  C) Showing statistics (memory usage) of a given index.
   * Syntax: 
    	./STATS BASENAME
		
		+ where:
    		-BASENAME: Such that all the files of the index are named as "BASENAME.*".
 
		+ example of use:
			./STATS indexes/EN100MB

4.1.2. Building an index in just-1-step (from $CURRENT/pizza directory). This way of building
	the WCSA is the pizza-chile way. Only one program (BUILDwcsa) is needed, but memory
	requirements are much bigger (due to internal fragmentation?) than in the form shown in Section
	4.1.1. To use BUILDwcsa just follow next explanation:

    * Syntax: 
    	./BUILDwcsa INFILE OUTBASEFILE ["BUILD_OPTIONS"]
    			
    	+ where:
    		-INFILE is a text file.
    		-OUTBASENAME is the base name for all the files used by the index (12 for sWCSA).
    		-BUILD_OPTIONS: Specify building parameters (presentation layer, sampling, and
				compression of psi). All those options appear between ""... and will be 
				separated by commas if more than one appear.

    			*sA: Distance between samples of the suffix array (A)
    			*sAinv: Distance of samples of the inverse of A
    			*sPsi: Distance between samples of the psi array
    			*nsHuff: set to 16 by default (nsHuffx1024 = numOfSymbols). Related to psi compression.
    			*psiSF : factor for the searches in the samples of psi (set to 1,2,4,8).
    			
    	+ example of use:
    		./BUILDwcsa ./texts/english.100M ./indexes/EN100MB "sA=32;sAinv=32;sPsi=32; nsHuff=16;psiSF=4"

    		    		
4.2. ** Querying the index **

	* Syntax:
		./SEARCHwcsa <index> <type> [wordsbefore][V] < patterns_file

	where: 
	<type>   denotes the type of queries:
		C <repetitions> counting occurrences. The process is repeated <repetitions> times and
			average times are reported (to avoid times equal to "0.000").

		l <wordsbefore><repetitions> locating queries (word-oriented);
			<wordsbefore> sets returned location -wordsbefore- word positions
			before each pattern occurrence.
			The process is repeated <repetitions>-times and avg-times are reported.

		d <radix-bytes> <wordsbefore>. displaying queries (word-oriented);
		    will extract 2*radix-bytes + lenght(pattern) bytes starting
			extraction -wordsbefore- words before an occurrence.
			 The extracted snippets are allocated dynamically.

		s <maxnumc><wordsbefore><repetitions> displaying queries. Word-oriented display
		   extracts up to 2*wordsbefore words, starting -wordsbefore- positions
		   before each occurrence. The max number of chars extracted is maxnumc;
			The extraction is *simulated* <repetitions>-times and avg-times are reported.
			Note that no-text is returned. ONLY extraction of data is simulated.

		e extracting queries. (word-oriented extract).

		------	
		**not supported by the simple-wcsa**
			L locating queries;                        /** char-based NOT SUPPORTED **/
			D <radix-num-char> displaying queries;     /** char-based NOT SUPPORTED **/
			    <radix-num-char> denotes the number of characters to display
				before and after each pattern occurrence.

			E extracting queries.                      /** char-based NOT SUPPORTED **/
		------

	[V] with this option it reports on the standard output
	    the results of the queries.
	
	
	* Each search appends the results (and statistics) to a text file named "times_[C|l|d|s|e]_SEARCHwcsa.txt" .
	

	Examples:
	
	./pizza/SEARCHwcsa ./indexes/EN100MB C 1000 < various/pattsEN100MB/EN100MB.xt1000_2
		
	./pizza/SEARCHwcsa ./indexes/EN100MB l 50 1 < various/pattsEN100MB/EN100MB.xt1000_2
		
	./pizza/SEARCHwcsa ./indexes/EN100MB d 50 5 V < various/pattsEN100MB/EN100MB.xt1000_4
		
	./pizza/SEARCHwcsa ./indexes/EN100MB s 10000 10 < various/pattsEN100MB/EN100MB.xt1000_2
		
	./pizza/SEARCHwcsa ./indexes/EN100MB e < various/pattsEN100MB/EN100MB.intervals.1000words.txt
   

============================================================================
Sample patterns used in our experiments.

(1)	Some sample patterns are given in the folder $CURRENT/various/pattsEN and $CURRENT/various/patts.

  **for QUERIES of type:
		C (count), L (locate), D (display), and
	    l (locateWords), d (displaywords), s (displayNoShow).
	
	./various/patts/enNoRep_2_1 
		--> 2 patters of 1 word.

	./various/patts/enNoRep_2_4 
		--> 2 patterns with phrases of 4 words.


	./various/pattsEN100MB/EN100MB.xt1000_1
	./various/pattsEN100MB/EN100MB.xt1000_2
	./various/pattsEN100MB/EN100MB.xt1000_4
	./various/pattsEN100MB/EN100MB.xt1000_8
	./various/pattsEN100MB/EN100MB.xt1000_16
	./various/pattsEN100MB/EN100MB.xt1000_32
		--> 1000 patterns consisting on phrases with [1|2|4|8|16|32] words each.

			
  **for QUERIES OF EXTRACTION OF A PART OF THE TEXT (e)		
	   	./pattsEN100MB/EN100MB.intervals.1000words.txt
   			--> 1000 intervals of type: from word x to y.   			
	   	./pattsEN100MB/EN100MB.intervals.10000words.txt
   			--> 10000 intervals of type: from word x to y.   			


============================================================================
Other utilities included in folder $CURRENT/extractor and $CURRENT/genintervals.

(2) You can create your own pattern sets using "EXTRACTPHRASES" and "GenIntervalsChars/Words"
	programs. Their syntax follows:
   	
	* For generating random words/phrases use program: EXTRACTPHRASES.
		[tar file] --> extractor.words.noRepeat.noEspaces.tar.gz)
		
		Syntax:  
			./EXTRACTPHRASES  <in file>  <out file> <numberOfPhrases> <phrase Lenght> <1/0 onlywords ?> [<stopwords_file>]

		example: 
			./EXTRACTPHRASES ../../texts/english.100MB ../pattsEN100MB/EN100MB.xt1000_8  1000 8 0
			./EXTRACTPHRASES ../../texts/english.100MB ../pattsEN100MB/EN100MB.xt1000_1  1000 1 1 src/english_stopwords.txt

	  
	* For generating random intervals (for extract operation), two programs are
	  provided (genIntervalsCharWords.tar.gz):
	  	- GenIntervalsChars <inFile> <length> <number> <out intervals file>
	  	- GenIntervalsWords <intsfile> <length> <number> <out intervals file>
	  	
	  	*README.chars & README.words are included in the package.

		example:
			./genIntervalsWords ../../indexes/EN100MB.se 1000  1000 ../pattsEN100MB/EN100MB.intervals.1000words.txt

============================================================================
